trigger:
  branches:
    include:
      - main
      - dev
      - feature/*

parameters:
  - name: runManually
    type: boolean
    default: false

stages:
  - stage: DeployToDev
    displayName: 'Deploy to Dev Environment'
    condition: "or(eq(variables['Build.SourceBranchName'], 'dev'), startsWith(variables['Build.SourceBranchName'], 'feature/'), eq('${{ parameters.runManually }}', true))"
    variables:
      - group: SF-Dev-Variables
    jobs:
      - job: DeployDev
        displayName: 'Deploy to Salesforce Dev'
        steps:
          - checkout: self

          - task: DownloadSecureFile@1
            name: GetJWTKey
            inputs:
              secureFile: 'server.key'

          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
              checkLatest: true

          - script: |
              npm install -g sfdx-cli
            displayName: 'Install Salesforce CLI'

          - script: |
              sfdx auth:jwt:grant ^
                --clientid $(SF_CLIENT_ID) ^
                --jwtkeyfile $(GetJWTKey.secureFilePath) ^
                --username $(SF_USERNAME) ^
                --instanceurl $(SF_INSTANCE_URL)
            displayName: 'Authenticate to Salesforce (Dev)'

          # Run PMD static analysis
          - script: |
              echo "Running PMD analysis"
              # Add your PMD command here, example:
              # pmd-bin/bin/run.sh pmd -d force-app -f text -R rulesets/apex/security.xml
            displayName: 'Run PMD Static Code Analysis'

          # Deploy with test coverage & validation
          - script: |
              sfdx force:source:deploy ^
                --sourcepath force-app ^
                --targetusername $(SF_USERNAME) ^
                --testlevel RunLocalTests ^
                --checkonly ^
                --wait 10
            displayName: 'Validate Deployment and Run Apex Tests (Dev)'

          # Actual deploy only if validation passed
          - script: |
              sfdx force:source:deploy ^
                --sourcepath force-app ^
                --targetusername $(SF_USERNAME) ^
                --testlevel RunLocalTests ^
                --ignorewarnings ^
                --wait 10
            displayName: 'Deploy to Dev Org'

  - stage: DeployToProd
    displayName: 'Deploy to Production Environment'
    condition: "or(eq(variables['Build.SourceBranchName'], 'main'), eq('${{ parameters.runManually }}', true))"
    variables:
      - group: SF-Prod-Variables
    jobs:
      - deployment: DeployProd
        displayName: 'Production Deployment'
        environment: 'Production'  # Azure DevOps environment for approvals
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: DownloadSecureFile@1
                  name: GetJWTKey
                  inputs:
                    secureFile: 'server.key'

                - task: NodeTool@0
                  inputs:
                    versionSpec: '18.x'
                    checkLatest: true

                - script: |
                    npm install -g sfdx-cli
                  displayName: 'Install Salesforce CLI'

                - script: |
                    sfdx auth:jwt:grant ^
                      --clientid $(SF_CLIENT_ID) ^
                      --jwtkeyfile $(GetJWTKey.secureFilePath) ^
                      --username $(SF_USERNAME) ^
                      --instanceurl $(SF_INSTANCE_URL)
                  displayName: 'Authenticate to Salesforce (Prod)'

                # Run PMD static analysis
                - script: |
                    echo "Running PMD analysis"
                    # Add your PMD command here
                  displayName: 'Run PMD Static Code Analysis'

                # Validate deployment and run tests before actual deploy
                - script: |
                    sfdx force:source:deploy ^
                      --sourcepath force-app ^
                      --targetusername $(SF_USERNAME) ^
                      --testlevel RunLocalTests ^
                      --checkonly ^
                      --wait 10
                  displayName: 'Validate Deployment and Run Apex Tests (Prod)'

                # Actual deploy after successful validation
                - script: |
                    sfdx force:source:deploy ^
                      --sourcepath force-app ^
                      --targetusername $(SF_USERNAME) ^
                      --testlevel RunLocalTests ^
                      --ignorewarnings ^
                      --wait 10
                  displayName: 'Deploy to Production Org'
